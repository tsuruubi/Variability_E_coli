#  Include TFs forming part of two-component systems, the signals are sensed by the sensor component (most of them located in the bacterial periplasm)
df_cs_e_tc<-read.xlsx(paste(getwd(),"RegulonDB","Cell_Sensing","Cell_Sensing.xlsx",sep="/"),sheet = "E-TC")
colnames(df_cs_e_tc)[1]<-"regulator"
df_cs_e_tc$regulator<-str_replace(df_cs_e_tc$regulator, pattern="/", replacement="")
df_cs_e_tc$regulator<-str_replace(df_cs_e_tc$regulator, pattern="\\?", replacement="")
for(i in 1:nrow(df_cs_e_tc)){
temp<-my_cure[my_cure$RegulonDB==df_cs_e_tc$regulator[i],]
if(nrow(temp)==1){
df_cs_e_tc$regulator[i]<-temp$Ecocyc
}
}
df_cs_e_tc<-df_cs_e_tc[df_cs_e_tc$regulator %in% unique(TRN$regulator),]
# E-TM
#  Include TFs sensing transportable metabolites; these TFs work in close connection with transport systems that sense/introduce specific metabolites from the milieu. The metabolites bound/sensed by this kind of TF are not anymore modified by the cell metabolism except those modifications inherent to the transport events (e.g. phosphorylation).
df_cs_e_tm<-read.xlsx(paste(getwd(),"RegulonDB","Cell_Sensing","Cell_Sensing.xlsx",sep="/"),sheet = "E-TM")
colnames(df_cs_e_tm)[1]<-"regulator"
i<-17
for(i in 1:nrow(df_cs_e_tm)){
df_cs_e_tm$regulator[i]<-str_split(df_cs_e_tm$regulator[i],pattern = " ")[[1]][1]
}
for(i in 1:nrow(df_cs_e_tm)){
temp<-my_cure[my_cure$RegulonDB==df_cs_e_tm$regulator[i],]
if(nrow(temp)==1){
df_cs_e_tm$regulator[i]<-temp$Ecocyc
}
}
df_cs_e_tm<-df_cs_e_tm[df_cs_e_tm$regulator %in% unique(TRN$regulator),]
# H
# Includes hybrid TFs, thus named because both bind/sense metabolites produced by the cell and transported from the milieu (mostly for sensing amino acids that in addition to be synthesized by the cell can be transported into the cell from the milieu).
df_cs_h<-read.xlsx(paste(getwd(),"RegulonDB","Cell_Sensing","Cell_Sensing.xlsx",sep="/"),sheet = "H")
colnames(df_cs_h)[1]<-"regulator"
df_cs_h$regulator<-str_replace(df_cs_h$regulator, pattern="\\*", replacement="")
for(i in 1:nrow(df_cs_h)){
df_cs_h$regulator[i]<-str_split(df_cs_h$regulator[i],pattern = " ")[[1]][1]
}
for(i in 1:nrow(df_cs_h)){
temp<-my_cure[my_cure$RegulonDB==df_cs_h$regulator[i],]
if(nrow(temp)==1){
df_cs_h$regulator[i]<-temp$Ecocyc
}
}
df_cs_h<-df_cs_h[df_cs_h$regulator %in% unique(TRN$regulator),]
# I-SM
# Include TFs binding/sensing metabolites generated by the cellular metabolism; by enzymatic reactions (sugar, nucleotides, cofactors, etc) or generated as byproducts of biochemical reactions (e.g. redox potential).
df_cs_i_sm<-read.xlsx(paste(getwd(),"RegulonDB","Cell_Sensing","Cell_Sensing.xlsx",sep="/"),sheet = "I-SM")
colnames(df_cs_i_sm)[1]<-"regulator"
for(i in 1:nrow(df_cs_i_sm)){
df_cs_i_sm$regulator[i]<-str_split(df_cs_i_sm$regulator[i],pattern = " ")[[1]][1]
}
for(i in 1:nrow(df_cs_i_sm)){
temp<-my_cure[my_cure$RegulonDB==df_cs_i_sm$regulator[i],]
if(nrow(temp)==1){
df_cs_i_sm$regulator[i]<-temp$Ecocyc
}
}
df_cs_i_sm<-df_cs_i_sm[df_cs_i_sm$regulator %in% unique(TRN$regulator),]
# I-DB
#  Include DNA-bending TFs for nucleoid or chromosome remodeling and compaction, the activity of this kind of TF is not directly affected by signal effectors but possibly by DNA supercoiling or macromolecular crowding.
df_cs_i_db<-read.xlsx(paste(getwd(),"RegulonDB","Cell_Sensing","Cell_Sensing.xlsx",sep="/"),sheet = "I-DB")
colnames(df_cs_i_db)[1]<-"regulator"
df_cs_i_db<-df_cs_i_db[df_cs_i_db$regulator %in% unique(TRN$regulator),]
Sys.time()
df_ec_eff<-as.data.frame(read_csv(paste(getwd(),"ECOCYC","2022_10_09_Ecocyc","transcription_factors_effectors.csv",sep="/")))
df_ec_eff<-df_ec_eff[!is.na(df_ec_eff$Effectors),]
df_ec_eff<-df_ec_eff[df_ec_eff$regulator %in% unique(TRN$regulator),]
sensory_tfs<-unique(c(df_cs_e_tc$regulator,
df_cs_e_tm$regulator,
df_cs_h$regulator,
df_cs_i_sm$regulator,
df_cs_i_db$regulator,
df_ec_eff$regulator))
#print(sensory_tfs)
Sys.time()
df_bt_core<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","core.csv",sep="/"),col_names = "node"))
df_bt_core$bt_role<-"core"
df_bt_inp<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","inp.csv",sep="/"),col_names = "node"))
df_bt_inp$bt_role<-"inp"
df_bt_intendrils<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","intendrils.csv",sep="/"),col_names = "node"))
df_bt_intendrils$bt_role<-"intendrils"
df_bt_others<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","others.csv",sep="/"),col_names = "node"))
df_bt_others$bt_role<-"others"
df_bt_out<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","out.csv",sep="/"),col_names = "node"))
df_bt_out$bt_role<-"out"
df_bt_outtendrils<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","outtendrils.csv",sep="/"),col_names = "node"))
df_bt_outtendrils$bt_role<-"outtendrils"
df_bt_tubes<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","tubes.csv",sep="/"),col_names = "node"))
df_bt_tubes$bt_role<-"tubes"
df_bt<-bind_rows(df_bt_core,df_bt_inp,df_bt_intendrils,df_bt_others,df_bt_out,df_bt_outtendrils,df_bt_tubes)
df_bt_regulators<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","regulators.csv",sep="/")))
df_bt$regulator_flag<-"Non-TR"
df_bt[df_bt$node %in% unique(df_bt_regulators$regulator),]$regulator_flag<-"TR"
df_bt$sensor_flag<-"Non-SR" # non sensory regulator
df_bt[df_bt$node %in% sensory_tfs,]$sensor_flag<-"SR"
TRhigh<-unique(c(dgsea_trn_evo[(dgsea_trn_evo$NES>0)&(dgsea_trn_evo$qvalue<0.05),]$ID,
dgsea_trn_env[(dgsea_trn_env$NES>0)&(dgsea_trn_env$qvalue<0.05),]$ID,
dgsea_trn_mut[(dgsea_trn_mut$NES>0)&(dgsea_trn_mut$qvalue<0.05),]$ID))
df_bt$impact_flag<-"TRlow" # low impact
df_bt[df_bt$node %in% TRhigh,]$impact_flag<-"TRhigh"
df_bt[df_bt$node %in% TRcom,]$impact_flag<-"TRcom"
df_ecoli_net<-as.data.frame(read_csv(paste(getwd(),"Bow_tie_GRN","output","nx_network_all.csv",sep="/")))
Sys.time()
df_bt_vis<-df_bt
my_palette_info<-data.frame(bt_role=qw(inp,intendrils,core,out,outtendrils,tubes,others),
# node_color=c("#42B540FF","#0099B4FF","#ED0000FF","#00468BFF","#925E9FFF","#FDAF91FF","#ADB6B6FF"))
node_color=c("#fde725","white","#6ece58","#1f9e89","white","white","white"))
df_bt_vis<-left_join(df_bt_vis,my_palette_info)
my_palette_info<-data.frame(impact_flag=qw(TRlow,TRhigh,TRcom),
node_color_impact=get_palette("Reds",3))
df_bt_vis<-left_join(df_bt_vis,my_palette_info)
my_range_info<-data.frame(bt_role=qw(inp,intendrils,core,out,outtendrils,tubes,others),size=0)
for(i in 1:nrow(my_range_info)){
my_range_info$size[i]<-nrow(df_bt_vis[df_bt_vis$bt_role==my_range_info$bt_role[i],])
}
my_range_info$xmean<-c(0,0,2,5,5,2,2)
my_range_info$ymean<-c(1,3,0,1,3,1.8,4)
my_range_info$sd<-c(0.1,0.1,0.1,0.3,0.1,0.1,0.1)
df_bt_vis$layout_x<-NA
df_bt_vis$layout_y<-NA
set.seed(123)
for(i in 1:nrow(my_range_info)){
df_bt_vis[df_bt_vis$bt_role==my_range_info$bt_role[i],]$layout_x<-rnorm(n = my_range_info$size[i],
mean = my_range_info$xmean[i],
sd =my_range_info$sd[i])
df_bt_vis[df_bt_vis$bt_role==my_range_info$bt_role[i],]$layout_y<-rnorm(n = my_range_info$size[i],
mean = my_range_info$ymean[i],
sd =my_range_info$sd[i])
}
set.seed(NULL)
g<-as_tbl_graph(df_ecoli_net,directed = T)
g<-g %>%
activate(nodes) %>%
left_join(df_bt_vis, by = c("name" = "node"))
temp<-data.frame(node=V(g)$name)
temp$order<-seq(1:nrow(temp))
df_bt_vis<-left_join(df_bt_vis,temp)
df_bt_vis<-df_bt_vis[order(df_bt_vis$order),]
LO<-as.matrix(df_bt_vis[,which(colnames(df_bt_vis) %in% qw(layout_x,layout_y))])
plot(g, vertex.color=V(g)$node_color, layout=LO,vertex.size=3,vertex.label="")
Sys.time()
# Node info
df_bt_vis_core<-df_bt_vis
df_bt_vis_core<-df_bt_vis_core[df_bt_vis_core$bt_role=="core",]
df_bt_vis_core$impact_flag<-factor(df_bt_vis_core$impact_flag,levels = qw(TRlow,TRhigh,TRcom))
df_bt_vis_core<-df_bt_vis_core[order(df_bt_vis_core$impact_flag),]
df_bt_vis_core$id<-seq(1:nrow(df_bt_vis_core))-1
df_bt_vis_core$angle <- 0 + 360 * df_bt_vis_core$id / nrow(df_bt_vis_core)
df_bt_vis_core$hjust <- ifelse((df_bt_vis_core$angle > 90)&(df_bt_vis_core$angle<270), 1, 0)
df_bt_vis_core$angle <- ifelse((df_bt_vis_core$angle > 90)&(df_bt_vis_core$angle<270), df_bt_vis_core$angle+180, df_bt_vis_core$angle)
df_bt_vis_core$labcol<-mycolpal[2]
df_bt_vis_core$lab<-df_bt_vis_core$node
df_bt_vis_core[df_bt_vis_core$impact_flag=="TRcom",]$lab<-paste(df_bt_vis_core[df_bt_vis_core$impact_flag=="TRcom",]$lab,"*",sep = "")
df_bt_vis_core$node_color_sensor<-ifelse(df_bt_vis_core$sensor_flag=="SR","#ED0000FF","#1B1919EF")
df_bt_vis_core$sensor_flag<-factor(df_bt_vis_core$sensor_flag,levels=c("SR","Non-SR"))
# Edge info
df_bt_vis_core_edgeinfo<-df_ecoli_net[(df_ecoli_net$source %in% df_bt_vis_core$node)&(df_ecoli_net$target %in% df_bt_vis_core$node),]
df_bt_vis_core_edgeinfo$edgecol<-"gray40"
df_bt_vis_core_edgeinfo$edgewidth<-0.8
g_core<-as_tbl_graph(df_bt_vis_core_edgeinfo,directed = T)
g_core<-g_core %>%
activate(nodes) %>%
left_join(df_bt_vis_core, by = c("name" = "node"))
# order the nodes
g_core <- permute(g_core, match(V(g_core)$name, df_bt_vis_core$node))
g_core %>%
ggraph::ggraph(layout="circle")+
ggraph::geom_edge_fan(alpha=0.5,arrow = arrow(length = unit(3, 'mm')),aes(color = as.factor(edgecol),width=edgewidth))+
# ggraph::geom_edge_loop(alpha=0.5,arrow = arrow(length = unit(3, 'mm')),aes(color = as.factor(edgecol),width=edgewidth),angle_calc = "along")+
ggraph::geom_node_point(aes(x=x*1.05,y=y*1.05), size=5,shape=21, fill="#6ece58")+
ggraph::geom_node_text(aes(x = x*1.2, y=y*1.2,angle=angle, label=lab, hjust=hjust,colour=sensor_flag), size=7) +
scale_color_manual(values = c("#ED0000FF","#1B1919EF"))+
ggraph::theme_graph(background="white",)+
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
expand_limits(x = c(-2, 2), y = c(-2, 2))+
scale_size(range = c(5, 10))
Sys.time()
nrow(df_bt_vis)
nrow(df_bt_vis[df_bt_vis$sensor_flag=="SR",]) # Nb of SR
nrow(df_bt_vis_core[df_bt_vis_core$sensor_flag=="SR",]) # Nb of SR in core
nrow(df_bt_vis[(df_bt_vis$bt_role=="inp")&(df_bt_vis$sensor_flag=="SR"),]) # Nb of SR in inp
nrow(df_bt_vis[(df_bt_vis$bt_role=="intendrils")&(df_bt_vis$sensor_flag=="SR"),]) # Nb of SR in intendrils
nrow(df_bt_vis[(df_bt_vis$bt_role=="out")&(df_bt_vis$sensor_flag=="SR"),]) # Nb of SR in out
nrow(df_bt_vis[(df_bt_vis$bt_role=="outtendrils")&(df_bt_vis$sensor_flag=="SR"),]) # Nb of SR in outtendrils
nrow(df_bt_vis[(df_bt_vis$bt_role=="tubes")&(df_bt_vis$sensor_flag=="SR"),]) # Nb of SR in tubes
nrow(df_bt_vis[(df_bt_vis$bt_role=="others")&(df_bt_vis$sensor_flag=="SR"),]) # Nb of SR in others
df_bt_stat=data.frame(bt_role=qw(inp,intendrils,core,out,outtendrils,tubes,others),
label=qw(IN,INTENDRILS, SCC,OUT,OUTTENDRILS,TUBES,OTHERS),
size=0,TR_size=0,Non_TR_size=0,SR_size=0,Non_SR_size=0)
df_bt_stat$label<-factor(df_bt_stat$label,levels = qw(IN,INTENDRILS, SCC,OUT,OUTTENDRILS,TUBES,OTHERS))
for(i in 1:nrow(df_bt_stat)){
df_bt_stat$size[i]<-nrow(df_bt[df_bt$bt_role==df_bt_stat$bt_role[i],])
df_bt_stat$TR_size[i]<-nrow(df_bt[(df_bt$regulator_flag=="TR")&(df_bt$bt_role==df_bt_stat$bt_role[i]),])
df_bt_stat$Non_TR_size[i]<-nrow(df_bt[(df_bt$regulator_flag=="Non-TR")&(df_bt$bt_role==df_bt_stat$bt_role[i]),])
df_bt_stat$SR_size[i]<-nrow(df_bt[(df_bt$sensor_flag=="SR")&(df_bt$bt_role==df_bt_stat$bt_role[i]),])
df_bt_stat$Non_SR_size[i]<-nrow(df_bt[(df_bt$regulator_flag=="TR")&(df_bt$sensor_flag=="Non-SR")&(df_bt$bt_role==df_bt_stat$bt_role[i]),])
}
df_bt_stat_long<-data.frame(bt_role=rep(qw(inp,intendrils,core,out,outtendrils,tubes,others),2),
label=rep(qw(IN,INTENDRILS, SCC,OUT,OUTTENDRILS,TUBES,OTHERS),2),
regulator_flag=rep(c("TR","Non-TR"),each=7),
sensor_flag=rep(c("SR","Non-SR"),each=7),
size=0,size_sr=0)
for(i in 1:nrow(df_bt_stat_long)){
if(df_bt_stat_long$regulator_flag[i]=="TR"){
df_bt_stat_long$size[i]<-df_bt_stat[(df_bt_stat$bt_role==df_bt_stat_long$bt_role[i]),]$TR_size
}else{
df_bt_stat_long$size[i]<-df_bt_stat[(df_bt_stat$bt_role==df_bt_stat_long$bt_role[i]),]$Non_TR_size
}
if(df_bt_stat_long$sensor_flag[i]=="SR"){
df_bt_stat_long$size_sr[i]<-df_bt_stat[(df_bt_stat$bt_role==df_bt_stat_long$bt_role[i]),]$SR_size
}else{
df_bt_stat_long$size_sr[i]<-df_bt_stat[(df_bt_stat$bt_role==df_bt_stat_long$bt_role[i]),]$Non_SR_size
}
}
df_bt_stat_long$regulator_flag<-factor(df_bt_stat_long$regulator_flag,levels=c("TR","Non-TR"))
df_bt_stat_long$sensor_flag<-factor(df_bt_stat_long$sensor_flag,levels=c("SR","Non-SR"))
ggbarplot(df_bt_stat_long,x="label",y="size",fill="regulator_flag",
legend.title="",legend="right",xlab="",ylab="Number of nodes",ylim=c(0,200),
position = position_dodge(0.9),size=0)+rotate_x_text()
ggbarplot(df_bt_stat_long,x="label",y="size_sr",fill="sensor_flag",
legend.title="",legend="right",xlab="",ylab="Number of TR",palette = c("#ED0000FF", "#1B1919EF"),
position = position_dodge(0.9),size=0)+rotate_x_text()
ggbarplot(df_bt_stat,x="label",y="TR_size",xlab="",ylab="Number of reuglators",fill="label", color="label",palette =c("#42B540FF","#0099B4FF","#ED0000FF","#00468BFF","#925E9FFF","#FDAF91FF","#ADB6B6FF"),legend="",size=0)+
rotate_x_text()
ggbarplot(df_bt_stat,x="label",y="SR_size",xlab="",ylab="Number of reuglators",fill="label", color="label",palette =c("#42B540FF","#0099B4FF","#ED0000FF","#00468BFF","#925E9FFF","#FDAF91FF","#ADB6B6FF"),legend="",size=0)+
rotate_x_text()
Sys.time()
df_bt_stml<-data.frame(source=rep("Stimuli",nrow(df_bt_vis[df_bt_vis$sensor_flag=="SR",])),
target=df_bt_vis[df_bt_vis$sensor_flag=="SR",]$node)
g_stml<-as_tbl_graph(df_bt_stml,directed = T)
g_stml<-igraph::union(g_stml,g)
g_stml<- set.vertex.attribute(g_stml, "node_color", "Stimuli", "#1B1919EF")
g_stml<- set.vertex.attribute(g_stml, "layout_x", "Stimuli", 3)
g_stml<- set.vertex.attribute(g_stml, "layout_y", "Stimuli", 2.7)
g_stml<- set.vertex.attribute(g_stml, name = "node_size", value = 3)
g_stml<- set.vertex.attribute(g_stml, "node_size", "Stimuli", 10)
g_stml<-set_edge_attr(g_stml, name = "edge_col",value="gray70")
g_stml<-set_edge_attr(g_stml, name = "edge_lty",value="solid")
for(i in 1:ecount(g_stml)){
if(V(g_stml)$name[get.edges(g_stml,i)[1]]=="Stimuli"){
g_stml<- set_edge_attr(g_stml, name = "edge_col",index = i,"#ED0000FF")
g_stml<- set_edge_attr(g_stml, name = "edge_lty",index = i,"dashed")
}
}
temp<-as_data_frame(g_stml,what = "vertices")
LO<-as.matrix(temp[,which(colnames(temp) %in% qw(layout_x,layout_y))])
plot(g_stml, vertex.color=V(g_stml)$node_color, layout=LO,vertex.size=V(g_stml)$node_size,vertex.label="",
edge.color=E(g_stml)$edge_col,edge.lty=E(g_stml)$edge_lty)
Sys.time()
temp0<-trn.stat.table[trn.stat.table$all_target>4,] %>% distinct(regulator,.keep_all = T)
# temp0<-trn.stat.table %>% distinct(regulator,.keep_all = T)
temp0<-temp0[temp0$regulator %in% df_bt_vis_core$node,]
trial<-10000
TRcom_scc<-TRcom
TRcom_scc<-TRcom_scc[TRcom_scc %in% df_bt_vis_core$node]
temp<-createEmptyDf(nrow=trial,ncol = 4,colnames = qw(test,regulators,ratio.TRcom,test.btw))
for(i in 1:nrow(temp)){
temp1<-temp0[sample(seq(1,nrow(temp0)),size = length(TRcom_scc),replace = F),]$regulator
temp$regulators[i]<-paste(temp1,collapse = ",")
temp$ratio.TRcom[i]<-length(temp1[temp1 %in% TRcom_scc])/length(TRcom_scc)
temp2<-dnet_edgeinfo_ts.global[dnet_edgeinfo_ts.global$who %in% temp1 & dnet_edgeinfo_ts.global$whom %in% temp1,]
temp2<-temp2[temp2$who!=temp2$whom,] # remove self-loop
g<-as_tbl_graph(temp2,directed = T)
# temp$test[i]<-ecount(g)/((length(TRcom)*(length(TRcom)-1))+length(TRcom)) # consider self-loop
temp$test[i]<-ecount(g)/((length(TRcom_scc)*(length(TRcom_scc)-1))) # not consider self-loop
temp1.2<-temp0[temp0$regulator %nin% temp1,] # the rest TFs
temp2.2<-dnet_edgeinfo_ts.global[dnet_edgeinfo_ts.global$who %in% temp1 & dnet_edgeinfo_ts.global$whom %in% temp1.2$regulator,]
temp2.3<-dnet_edgeinfo_ts.global[dnet_edgeinfo_ts.global$whom %in% temp1 & dnet_edgeinfo_ts.global$who %in% temp1.2$regulator,]
temp2.4<-bind_rows(temp2.2,temp2.3)
temp$test.btw[i]<-nrow(temp2.4)/(2*length(TRcom_scc)*nrow(temp1.2))
}
temp3<-dnet_edgeinfo_ts.global.sbst
temp3<-temp3[temp3$who!=temp3$whom,]
g<-as_tbl_graph(temp3,directed = T)
# temp3<-ecount(g)/((length(TRcom)*(length(TRcom)-1))+length(TRcom)) # consider self-loop
temp3<-ecount(g)/((length(TRcom_scc)*(length(TRcom_scc)-1))) # not consider self-loop
print(paste("Edge density of TRcom within SCC is",temp3))
temp4<-nrow(as.data.frame(temp[temp$test>temp3,]))/trial
# Edge density within randomly sampled 13 regulators
df.rndmpick.edgedens_scc<-temp
p<-gghistogram(df.rndmpick.edgedens_scc,x="test",y="..density..",bins=30,
fill="black",
color="darkgray",alpha=1,size=0,
# add="mean",add.params = list(color="black",linetype=2),
xlab="Edge density",ylab="Relative frequency [a.u.]")+
geom_vline(xintercept = temp3,linetype=1,color=mycolpal[2])+
scale_x_continuous(breaks = get_breaks(by = 0.1, from = 0),limits =  c(0, 0.3))
p<-ggpar(p,font.x=c(17),font.y = c(17),font.xtickslab = c(17),font.ytickslab = c(17))
if(nrow(as.data.frame(df.rndmpick.edgedens_scc[df.rndmpick.edgedens_scc$test>temp3,]))==0){
p<-p+annotate("text",x=temp3,y=10,label=paste("p< ",1/trial ,sep=""),hjust = 0.3,vjust = 0, parse=F,size=6)
}else{
p<-p+annotate("text",x=temp3,y=10,label=paste("p= ",temp4 ,sep=""),hjust = 0.3,vjust = 0, parse=F,size=6)
}
p
Sys.time()
my_df<-df.regcount.subcomp
my_df$SRs<-NA
my_df$SRcount<-0
my_df$NonTRcomSRs<-NA
my_df$NonTRcomSRcount<-0
i<-1
for (i in 1:nrow(my_df)){
if(!is.na(my_df$regulators[i])){
my_regs<-str_split(my_df$regulators[i],",")[[1]]
my_regs<-my_regs[my_regs %in% df_bt_stml$target]
if(length(my_regs)>0){
my_df$SRs[i]<-paste(my_regs,collapse = ",")
my_df$SRcount[i]<-length(my_regs)
}
my_regs<-my_regs[my_regs %nin% TRcom]
if(length(my_regs)>0){
my_df$NonTRcomSRs[i]<-paste(my_regs,collapse = ",")
my_df$NonTRcomSRcount[i]<-length(my_regs)
}
}
}
my_df2<-my_df
my_df2$No
ggscatter(my_df,x="SRcount",y="DMenv",alpha=0.1,color="TRcomflag2",legend="right",legend.title="")+
stat_cor(method = "spearman",label.x = 4,label.y =2)
ggscatter(my_df[my_df$Count.allregs==5,],x="NonTRcomSRcount",y="DMenv",alpha=0.1,color="TRcomflag2",legend="right",legend.title="")+
stat_cor(method = "spearman",label.x = 0,label.y = 2)
ggscatter(my_df,y="SRcount",x="Count.allregs",xlab="Number of unique regulators", ylab="Number of unique SRs",alpha=0.1)+
stat_cor(method = "spearman",label.x = 0,label.y=9)
my_y<-"DMenv"
my_n<-7
ggscatter(my_df[my_df$Count.allregs==my_n,],y=my_y,x="SRcount",xlab="Number of unique SRs", ylab=my_y,alpha=0.3,color="TRcomflag2",legend="right",legend.title="")+
stat_cor(method = "spearman",label.x = 0,label.y = 2)
ggscatter(my_df[my_df$Count.allregs==my_n,],y=my_y,x="NonTRcomSRcount",xlab="Number of unique Non-TRcom SRs", ylab=my_y,alpha=0.3,color="TRcomflag2",legend="right",legend.title="")+
stat_cor(method = "spearman",label.x = 0,label.y = 2)
Sys.time()
# DM values
my_df<-df_DMall[,which(colnames(df_DMall) %in% qw(gene,Bnb,DMenv,DMevo,DMmut))]
my_tmp<-df_strs_maeiwa[,which(colnames(df_strs_maeiwa) %in% qw(Bnb,DMstrs))]
my_df<-left_join(my_df,my_tmp)
my_tmp<-df_strs_hori[,which(colnames(df_strs_hori) %in% qw(Bnb,DMstrs))]
colnames(my_tmp)[colnames(my_tmp)=="DMstrs"]<-"DMstrs_hp"
my_df<-left_join(my_df,my_tmp)
my_tmp<-df_strs_hori_evo[,which(colnames(df_strs_hori_evo) %in% qw(Bnb,DMstrs))]
colnames(my_tmp)[colnames(my_tmp)=="DMstrs"]<-"DMstrs_he"
my_df<-left_join(my_df,my_tmp)
my_tmp<-df_prtn_sch[,which(colnames(df_prtn_sch) %in% qw(Bnb,DMprtn))]
my_df<-left_join(my_df,my_tmp)
my_tmp<-df_tani[df_tani$HL_label=="High",]
my_tmp<-my_tmp %>% select(Bnb,TNDM)
colnames(my_tmp)[colnames(my_tmp)=="TNDM"]<-"DMnoise_ch"
my_df<-left_join(my_df,my_tmp)
my_df<-my_df %>% select(gene,Bnb,everything())
my_df<-my_df[order(my_df$Bnb),]
my_mat<-matrix(data=NA,nrow=5,ncol=3)
rownames(my_mat)<-qw(DMstrs_hp,DMstrs_he,DMstrs,DMprtn,DMnoise_ch)
colnames(my_mat)<-qw(DMenv,DMevo,DMmut)
for(i in 1:nrow(my_mat)){
for(j in 1:ncol(my_mat)){
my_tmp<-my_df %>% select(rownames(my_mat)[i],colnames(my_mat)[j])
my_mat[i,j]<-cor.test(my_tmp[,1],my_tmp[,2], method = "spearman")$estimate
}
}
my_fontsize<-16
p<-ggcorrplot::ggcorrplot(t(my_mat),
legend.title = "Spearman's R",
lab = TRUE,lab_size = my_lab_fontsize*0.8,tl.cex = my_fontsize,outline.col = "gray40")+
scale_fill_gradient(limit = c(0,1.0),breaks = seq(0,1,0.2), low = "white", high =  "#2171B5",
guide=guide_colourbar(title= "R",title.position = "top",ticks.linewidth = 1))
p<-ggpar(p,legend.title = "R",font.legend = my_fontsize)+theme(axis.ticks.x = element_blank(),axis.ticks.y = element_blank())
p
Sys.time()
# DM values
# Env
my_df<-as.data.frame(res.pca.global_env$rotation)
my_df<-my_df %>% select(PC1,PC2,PC3)
colnames(my_df)<-paste("Env",seq(1,3),sep="_PC")
my_df$Bnb<-rownames(my_df)
my_df<-my_df %>% select(Bnb,everything())
# Strs
my_tmp<-as.data.frame(res.pca.global_strs_mi$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Strs_hp
my_tmp<-as.data.frame(res.pca.global_strs_hp$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs_hp",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Strs_he
my_tmp<-as.data.frame(res.pca.global_strs_he$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs_he",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Prtn
my_tmp<-as.data.frame(res.pca.global_prtn$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Prtn",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
my_mat<-matrix(data=NA,nrow=15,ncol=3)
rownames(my_mat)<-paste(rep(qw(Strs,Strs_hp,Strs_he,Prtn),each=3),rep(qw(PC1,PC2,PC3),5),sep="_")
colnames(my_mat)<-paste("Env",seq(1,3),sep="_PC")
for(i in 1:nrow(my_mat)){
for(j in 1:ncol(my_mat)){
my_tmp<-my_df %>% select(rownames(my_mat)[i],colnames(my_mat)[j])
my_mat[i,j]<-cor.test(my_tmp[,1],my_tmp[,2], method = "spearman")$estimate
}
}
my_mat<-abs(my_mat)
my_fontsize<-16
p<-ggcorrplot::ggcorrplot(t(my_mat),
lab = TRUE,lab_size = my_lab_fontsize*0.8,tl.cex = my_fontsize,outline.col = "gray40")+
scale_fill_gradient(limits = c(0,0.65), breaks = seq(0,0.6,0.2),low = "white", high =  "#E46726",
guide=guide_colourbar(title= "|R|",title.position = "top",ticks.linewidth = 1))
p<-ggpar(p,legend.title = "|R|",font.legend = my_fontsize)+theme(axis.ticks.x = element_blank(),axis.ticks.y = element_blank())
p
Sys.time()
# DM values
# Evo
my_df<-as.data.frame(res.pca.global_evo$rotation)
my_df<-my_df %>% select(PC1,PC2,PC3)
colnames(my_df)<-paste("Evo",seq(1,3),sep="_PC")
my_df$Bnb<-rownames(my_df)
my_df<-my_df %>% select(Bnb,everything())
# Strs
my_tmp<-as.data.frame(res.pca.global_strs_mi$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Strs_hp
my_tmp<-as.data.frame(res.pca.global_strs_hp$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs_hp",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Strs_he
my_tmp<-as.data.frame(res.pca.global_strs_he$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs_he",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Prtn
my_tmp<-as.data.frame(res.pca.global_prtn$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Prtn",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
my_mat<-matrix(data=NA,nrow=15,ncol=3)
rownames(my_mat)<-paste(rep(qw(Strs,Strs_hp,Strs_he,Prtn),each=3),rep(qw(PC1,PC2,PC3),5),sep="_")
colnames(my_mat)<-paste("Evo",seq(1,3),sep="_PC")
for(i in 1:nrow(my_mat)){
for(j in 1:ncol(my_mat)){
my_tmp<-my_df %>% select(rownames(my_mat)[i],colnames(my_mat)[j])
my_mat[i,j]<-cor.test(my_tmp[,1],my_tmp[,2], method = "spearman")$estimate
}
}
my_mat<-abs(my_mat)
my_fontsize<-16
p<-ggcorrplot::ggcorrplot(t(my_mat),
lab = TRUE,lab_size = my_lab_fontsize*0.8,tl.cex = my_fontsize,outline.col = "gray40")+
scale_fill_gradient(limits = c(0,0.65), breaks = seq(0,0.6,0.2),low = "white", high =  "#E46726",
guide=guide_colourbar(title= "|R|",title.position = "top",ticks.linewidth = 1))
p<-ggpar(p,legend.title = "|R|",font.legend = my_fontsize)+theme(axis.ticks.x = element_blank(),axis.ticks.y = element_blank())
p
Sys.time()
# DM values
# Mut
my_df<-as.data.frame(res.pca.global_mut$rotation)
my_df<-my_df %>% select(PC1,PC2,PC3)
colnames(my_df)<-paste("Mut",seq(1,3),sep="_PC")
my_df$Bnb<-rownames(my_df)
my_df<-my_df %>% select(Bnb,everything())
# Strs
my_tmp<-as.data.frame(res.pca.global_strs_mi$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Strs_hp
my_tmp<-as.data.frame(res.pca.global_strs_hp$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs_hp",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Strs_he
my_tmp<-as.data.frame(res.pca.global_strs_he$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Strs_he",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
# Prtn
my_tmp<-as.data.frame(res.pca.global_prtn$rotation)
my_tmp<-my_tmp %>% select(PC1,PC2,PC3)
colnames(my_tmp)<-paste("Prtn",seq(1,3),sep="_PC")
my_tmp$Bnb<-rownames(my_tmp)
my_df<-left_join(my_df,my_tmp)
my_mat<-matrix(data=NA,nrow=15,ncol=3)
rownames(my_mat)<-paste(rep(qw(Strs,Strs_hp,Strs_he,Prtn),each=3),rep(qw(PC1,PC2,PC3),5),sep="_")
colnames(my_mat)<-paste("Mut",seq(1,3),sep="_PC")
for(i in 1:nrow(my_mat)){
for(j in 1:ncol(my_mat)){
my_tmp<-my_df %>% select(rownames(my_mat)[i],colnames(my_mat)[j])
my_mat[i,j]<-cor.test(my_tmp[,1],my_tmp[,2], method = "spearman")$estimate
}
}
my_mat<-abs(my_mat)
my_fontsize<-16
p<-ggcorrplot::ggcorrplot(t(my_mat),
lab = TRUE,lab_size = my_lab_fontsize*0.8,tl.cex = my_fontsize,outline.col = "gray40")+
scale_fill_gradient(limits = c(0,0.65), breaks = seq(0,0.6,0.2),low = "white", high =  "#E46726",
guide=guide_colourbar(title= "|R|",title.position = "top",ticks.linewidth = 1))
p<-ggpar(p,legend.title = "|R|",font.legend = my_fontsize)+theme(axis.ticks.x = element_blank(),axis.ticks.y = element_blank())
p
Sys.time()
